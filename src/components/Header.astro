---
// Detect current language from URL
const pathname = Astro.url.pathname;
const isChinesePage = !pathname.startsWith('/en/');
const langPrefix = isChinesePage ? '' : '/en';

const links = isChinesePage ? [
  {
    text: "首页",
    link: "/",
  },
  {
    text: "议程",
    link: "/agenda",
  },
] : [
  {
    text: "Home",
    link: "/en/",
  },
  {
    text: "Schedule",
    link: "/en/agenda",
  },
];

// Language switcher link - maintain current page when switching languages
const currentPath = pathname.replace(/^\/(en)?/, ''); // Remove language prefix
const langSwitchLink = isChinesePage 
  ? `/en${currentPath.startsWith('/') ? currentPath : '/' + currentPath}`.replace('//', '/')
  : currentPath || '/';
const langSwitchText = isChinesePage ? 'EN' : '中';

const slug = Astro.url.pathname
---

<header class="header">
  <nav class="top-nav">
    <div class="nav-container">
      <div class="logo">
        <a href={langPrefix || '/'}>
          <img src="https://raw.githubusercontent.com/gosimfoundation/paris-2025/main/public/images/logo.svg" alt="GOSIM" />
        </a>
      </div>
      
      <div class="nav-content">
        <div class="nav-links desktop-nav">
          {
            links.map((loop) => (
              <a 
                href={loop.link} 
                class={`nav-link ${loop.link === slug ? 'active' : ''}`}
              >
                {loop.text}
              </a>
            ))
          }
        </div>
        
        <div class="language-toggle">
          <a href={langSwitchLink} class="lang-toggle-btn" data-lang={langSwitchText} title={isChinesePage ? 'Switch to English' : 'Switch to Chinese'}>
            <span class="lang-text">{langSwitchText}</span>
          </a>
        </div>
        
        <button class="mobile-menu-toggle" aria-label="Toggle menu">
          <span></span>
          <span></span>
          <span></span>
        </button>
      </div>
    </div>
  </nav>
  
  <!-- Mobile Menu -->
  <nav class="mobile-nav">
    <div class="mobile-nav-content">
      <div class="mobile-nav-header">
        <div class="mobile-lang-toggle">
          <a href={langSwitchLink} class="lang-toggle-btn" data-lang={langSwitchText}>
            {langSwitchText}
          </a>
        </div>
      </div>
      {
        links.map((loop) => (
          <a 
            href={loop.link} 
            class={`mobile-nav-link ${loop.link === slug ? 'active' : ''}`}
          >
            {loop.text}
          </a>
        ))
      }
    </div>
  </nav>
</header>

<style>
  .header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1000;
    background: transparent;
    transition: transform 0.3s ease, background-color 0.3s ease;
    pointer-events: none;
    transform: translateY(0);
  }
  
  .header.header-hidden {
    transform: translateY(-100%);
  }
  
  .header.header-scrolled {
    background: rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(8px);
  }
  
  body[data-theme-nav="light"] .header.header-scrolled {
    background: rgba(255, 255, 255, 0.2);
    backdrop-filter: blur(8px);
  }
  
  .header * {
    pointer-events: auto;
  }

  .top-nav {
    padding: 1rem 0;
  }

  .nav-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .logo img {
    height: 40px;
    transition: transform 0.3s ease;
    filter: brightness(0) invert(1);
  }
  
  body[data-theme-nav="light"] .header .logo img {
    filter: none;
  }

  .logo a:hover img {
    transform: scale(1.05);
  }

  .nav-content {
    display: flex;
    align-items: center;
    gap: 2rem;
  }

  .nav-links {
    display: flex;
    gap: 2rem;
  }

  .header .nav-link {
    color: rgba(255, 255, 255, 0.9) !important;
    text-decoration: none;
    font-weight: 500;
    transition: all 0.3s ease;
    position: relative;
    padding: 0.5rem 0;
  }
  
  body[data-theme-nav="light"] .header .nav-link {
    color: rgba(0, 0, 0, 0.8) !important;
  }

  .nav-link::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 2px;
    background: #0091ea;
    transition: width 0.3s ease;
  }
  
  body[data-theme-nav="light"] .header .nav-link::after {
    background: #333;
  }

  .nav-link:hover {
    color: #ffffff;
  }
  
  body[data-theme-nav="light"] .header .nav-link:hover {
    color: #000000 !important;
  }

  .nav-link:hover::after,
  .nav-link.active::after {
    width: 100%;
  }


  .language-toggle {
    display: flex;
    align-items: center;
  }

  .lang-toggle-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background: #1976d2 !important; /* Default blue for EN */
    color: #ffffff;
    text-decoration: none;
    font-weight: 600;
    font-size: 0.55rem;
    transition: all 0.3s ease;
    border: none;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }
  
  .lang-toggle-btn[data-lang="中"] {
    background: #de2910 !important; /* Chinese flag red for 中 */
  }
  
  .lang-toggle-btn .lang-text {
    background: transparent !important;
    padding: 0;
    border-radius: 0;
    color: #ffffff;
  }
  
  body[data-theme-nav="light"] .header .lang-toggle-btn {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  }
  
  body[data-theme-nav="light"] .header .lang-toggle-btn .lang-text {
    color: #ffffff !important;
  }

  .lang-toggle-btn:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
  }
  
  .lang-toggle-btn[data-lang="EN"]:hover {
    background: #1565c0 !important; /* Darker blue on hover */
  }
  
  .lang-toggle-btn[data-lang="中"]:hover {
    background: #c41e0a !important; /* Darker Chinese flag red on hover */
  }
  
  body[data-theme-nav="light"] .header .lang-toggle-btn:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);
  }

  /* Mobile menu toggle */
  .mobile-menu-toggle {
    display: none;
    flex-direction: column;
    gap: 4px;
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
  }

  .mobile-menu-toggle span {
    display: block;
    width: 24px;
    height: 2px;
    background: #ffffff;
    transition: all 0.3s ease;
  }
  
  body[data-theme-nav="light"] .header .mobile-menu-toggle span {
    background: #000000;
  }

  /* Mobile navigation */
  .mobile-nav {
    display: none;
    position: absolute;
    top: 72px;
    left: 0;
    right: 0;
    background: rgba(0, 0, 0, 0.95);
    backdrop-filter: blur(10px);
    transform: translateY(-100%);
    transition: transform 0.3s ease, opacity 0.3s ease;
    padding: 2rem 0;
    overflow: hidden;
    opacity: 0;
    pointer-events: none;
  }
  
  body[data-theme-nav="light"] .mobile-nav {
    background: rgba(255, 255, 255, 0.95);
  }

  .mobile-nav.active {
    transform: translateY(0);
    opacity: 1;
    pointer-events: auto;
  }

  .mobile-nav-content {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .mobile-nav-link {
    color: rgba(255, 255, 255, 0.9);
    text-decoration: none;
    font-weight: 500;
    padding: 1rem 0;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s ease;
  }
  
  body[data-theme-nav="light"] .mobile-nav-link {
    color: rgba(0, 0, 0, 0.8);
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  }

  .mobile-nav-link:hover {
    color: #ffffff;
    padding-left: 1rem;
  }
  
  body[data-theme-nav="light"] .mobile-nav-link:hover {
    color: #000000;
  }

  .mobile-nav-header {
    display: flex;
    justify-content: flex-end;
    margin-bottom: 1rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }

  body[data-theme-nav="light"] .mobile-nav-header {
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  }

  .mobile-lang-toggle {
    display: flex;
    justify-content: flex-end;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .desktop-nav {
      display: none;
    }

    .language-toggle {
      display: none;
    }

    .mobile-menu-toggle {
      display: flex;
    }
    
    .mobile-nav {
      display: block;
    }

    .nav-container {
      padding: 0 1rem;
    }
  }
</style>

<script>
  // Mobile menu toggle
  const mobileMenuToggle = document.querySelector('.mobile-menu-toggle');
  const mobileNav = document.querySelector('.mobile-nav');
  
  mobileMenuToggle?.addEventListener('click', () => {
    mobileNav?.classList.toggle('active');
    mobileMenuToggle.classList.toggle('active');
  });

  // Close mobile menu when clicking a link
  const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');
  mobileNavLinks.forEach(link => {
    link.addEventListener('click', () => {
      mobileNav?.classList.remove('active');
      mobileMenuToggle?.classList.remove('active');
    });
  });

  // Wait for DOM to be ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initHeaderBehavior);
  } else {
    initHeaderBehavior();
  }
  
  function initHeaderBehavior() {
    console.log('Initializing header behavior...');
    
    // Set initial theme
    document.body.setAttribute('data-theme-nav', 'dark');
    
    const header = document.querySelector('.header');
    let lastScrollY = window.scrollY;
    let ticking = false;
    
    
    const checkTheme = () => {
      const scrollPosition = window.scrollY + 50;
      const sections = document.querySelectorAll('[data-nav-theme]');
      
      let currentTheme = 'dark';
      
      sections.forEach(section => {
        const rect = section.getBoundingClientRect();
        const top = rect.top + window.scrollY;
        const bottom = top + rect.height;
        
        if (scrollPosition >= top && scrollPosition < bottom) {
          currentTheme = section.getAttribute('data-nav-theme') || 'dark';
        }
      });
      
      const bodyTheme = document.body.getAttribute('data-theme-nav');
      if (bodyTheme !== currentTheme) {
        document.body.setAttribute('data-theme-nav', currentTheme);
      }
    };
    
    const updateHeader = () => {
      const currentScrollY = window.scrollY;
      
      // Add background when scrolled
      if (currentScrollY > 50) {
        header.classList.add('header-scrolled');
      } else {
        header.classList.remove('header-scrolled');
      }
      
      // Don't hide header when at the top of the page
      if (currentScrollY < 100) {
        header.classList.remove('header-hidden');
      } else if (currentScrollY > lastScrollY && currentScrollY > 200) {
        // Scrolling down - hide header (only after scrolling 200px)
        header.classList.add('header-hidden');
      } else {
        // Scrolling up - show header
        header.classList.remove('header-hidden');
      }
      
      lastScrollY = currentScrollY;
      ticking = false;
    };
    
    const onScroll = () => {
      if (!ticking) {
        window.requestAnimationFrame(() => {
          updateHeader();
          checkTheme();
        });
        ticking = true;
      }
    };
    
    // Listen for scroll events
    window.addEventListener('scroll', onScroll);
    
    // Initial check
    checkTheme();
  }
</script>

<style>

  /* Active mobile menu toggle */
  .mobile-menu-toggle.active span:nth-child(1) {
    transform: rotate(45deg) translate(5px, 5px);
  }

  .mobile-menu-toggle.active span:nth-child(2) {
    opacity: 0;
  }

  .mobile-menu-toggle.active span:nth-child(3) {
    transform: rotate(-45deg) translate(7px, -6px);
  }
</style>