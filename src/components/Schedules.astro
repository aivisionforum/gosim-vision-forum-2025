---
// Packages
import { Picture } from "astro:assets"
import type { ImageMetadata } from "astro"

// Components
import SocialShare from "./SocialShare.astro"

interface Speaker {
  id: string
  name: string
  roleOrg: string
  role?: string
  tags: string[]
  image: string
  bio?: string
}

interface Session {
  date: string
  timeSlot: string
  title: string
  content: string
  speakers: Speaker[]
  category?: string
  isSpecialEvent?: boolean
  room?: string
}

interface Props {
  currentDay?: string
  activeCategory?: string
}

// Import the schedule data
import scheduleDataZh from "../json/Schedule.json"
import scheduleDataEn from "../json/ScheduleEn.json"

// Import all images
const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/speakers/*.{jpeg,jpg,png,gif}"
)

// Determine language from URL
const isEnglish = Astro.url.pathname.includes('/en/')
const scheduleData = isEnglish ? scheduleDataEn : scheduleDataZh

// Use the provided props or default values
const { currentDay = isEnglish ? "September 12" : "9月12日", activeCategory = "All" } = Astro.props

// Helper function to get category name from tag ID
const getCategoryNameFromTag = (tagId: string): string => {
  const category = scheduleData.categories.find((cat) => cat.id === tagId)
  return category ? category.name : tagId
}

// Improved function to sort sessions by time
const sortSessionsByTime = (sessions: Session[]) => {
  return sessions.sort((a, b) => {
    // Extract start times from timeSlot
    const [aStartTime] = a.timeSlot.split("-")
    const [bStartTime] = b.timeSlot.split("-")

    // Split hours and minutes
    const [aHour, aMinute] = aStartTime.split(":").map(Number)
    const [bHour, bMinute] = bStartTime.split(":").map(Number)

    // Compare times
    return aHour * 60 + aMinute - (bHour * 60 + bMinute)
  })
}

// Get sessions directly from all-sessions
const sortedAllSessions = scheduleData.sessions["all-sessions"] || []

// Helper function to generate event URL
const getEventUrl = (title: string): string => {
  // Get the current URL origin (domain)
  const origin = Astro.url.origin;
  // Create the full URL with domain
  return `${origin}/schedule/${title.toLowerCase().replace(/[^\w\s-]/g, '').replace(/\s+/g, "-").replace(/-+/g, '-').trim()}/`;
}
---

<div class="filter-container filter-alpha-animate">
  <div class="overlay overlay-dark" data-filter-toggle="close">
    <div class="close" data-filter-toggle="close">
      <div class="close-fill"></div>
      <div class="bar bar-top"></div>
      <div class="bar bar-bottom"></div>
    </div>
  </div>
  <div class="filter-box">
    <p>Filter:</p>
    <div class="filter-group" data-filter-group>
      <div
        class="single-filter"
        data-filter-status={activeCategory === "All" ? "active" : "not-active"}
        data-filter-category="all"
      >
        <span>All</span>
      </div>
      {
        scheduleData.categories.map((category) => (
          <div
            class="single-filter"
            data-filter-status={
              category.name === activeCategory ? "active" : "not-active"
            }
            data-filter-category={category.name.toLowerCase().replace(/ /g, '-')}
          >
            <span>{category.name}</span>
          </div>
        ))
      }
    </div>
  </div>
</div>

<section
  class="section section-agenda-grid"
  id="grid"
  data-filter-section
  data-theme-section="light"
  data-bg-section="light"
  data-scroll-section
>
  <div class="container">
    <div class="row row-list accordion visible" data-filter-grid>
      <div
        class="list-group"
        data-filter-status={activeCategory === "All" ? "active" : "not-active"}
        data-filter-category="all"
      >
        {
          sortedAllSessions.length > 0 ? (
            <ul class="row row-list">
              {sortedAllSessions.map((session: Session) => (
                <li
                  class={`single-agenda-card single-accordion-item card-hover ${session.isSpecialEvent ? 'special-event' : ''}`}
                  data-accordion-status="not-active"
                  data-filter-status="active"
                  data-filter-category="all"
                >
                  <div
                    class="top"
                    data-accordion-toggle={
                      session.speakers.length > 0 || session.content
                        ? true
                        : null
                    }
                  >
                    <div class="left">
                      <div class="timeslot">
                        <p class="timedate">{session.date}</p>
                        <p>{session.timeSlot}</p>
                      </div>
                      <h2 class="h5">{session.title}</h2>
                    </div>
                    {(session.speakers.length > 0 || session.content) && (
                      <div class="plus">
                        <div class="plus-fill"></div>
                        <div class="bar bar-top"></div>
                        <div class="bar bar-bottom"></div>
                      </div>
                    )}
                  </div>
                  {(session.speakers.length > 0 || session.content) && (
                    <div class="bottom">
                      <div class="bottom-wrap">
                        <div class="bottom-content">
                          {session.category && (
                            <div class="card-row styled-content">
                             <div class="location-row"> <svg width="16" height="19" viewBox="0 0 16 19" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8 18.6668C8.12016 18.6653 8.23643 18.624 8.33067 18.5494C8.65067 18.2934 16 12.3307 16 8.00005C16 5.8783 15.1571 3.84346 13.6569 2.34316C12.1566 0.84286 10.1217 0 8 0C5.87827 0 3.84344 0.84286 2.34315 2.34316C0.842855 3.84346 0 5.8783 0 8.00005C0 12.3307 7.34933 18.2934 7.66933 18.5494C7.76357 18.624 7.87984 18.6653 8 18.6668ZM8 4.80003C8.52742 4.80003 9.04299 4.95643 9.48152 5.24945C9.92005 5.54246 10.2618 5.95894 10.4637 6.44622C10.6655 6.93349 10.7183 7.46967 10.6154 7.98696C10.5125 8.50424 10.2586 8.9794 9.88562 9.35234C9.51268 9.72528 9.03752 9.97926 8.52024 10.0822C8.00296 10.185 7.46678 10.1322 6.97951 9.9304C6.49224 9.72857 6.07576 9.38677 5.78275 8.94824C5.48973 8.50971 5.33333 7.99413 5.33333 7.46671C5.33333 6.75946 5.61429 6.08118 6.11438 5.58108C6.61448 5.08098 7.29276 4.80003 8 4.80003Z" fill="#1D1D1D"/>
</svg>
<p>{session.room || scheduleData.categories.find(cat => cat.name === session.category)?.room || 'TBA'}</p></div>
                            </div>
                          )}
                          {session.content && (
                            <div
                              class="card-row styled-content"
                              set:html={session.content}
                            />
                          )}

                          <!-- Wrap speakers and social share in a single container -->
                          <div class="speakers-and-share-container">
                            {session.speakers.length > 0 && (
                              <div class="card-row card-row-speakers">
                                {session.speakers.map((speaker: Speaker) => (
                                  <div class="card-col">
                                    <a
                                      class="single-speakers-card"
                                      href={`/speakers/${speaker.id}/`}
                                    >
                                      {speaker?.image &&
                                      images[
                                        `/src/assets/speakers/${speaker.image}`
                                      ] ? (
                                        <div class="card-row card-row-image">
                                          <div class="card-image">
                                            <Picture
                                              src={images[
                                                `/src/assets/speakers/${speaker.image}`
                                              ]()}
                                              formats={["webp", "jpg"]}
                                              alt={speaker.name}
                                              class="overlay"
                                              widths={[
                                                275, 400, 500, 600, 750, 900,
                                              ]}
                                              sizes="(max-width: 700px) 58vw, 450px"
                                            />
                                          </div>
                                          <div class="card-tags group-tags">
                                            {speaker.tags.map((tag) => (
                                              <div class="single-tag">
                                                <p>{getCategoryNameFromTag(tag)}</p>
                                              </div>
                                            ))}
                                          </div>
                                        </div>
                                      ) : (
                                        <div class="card-tags group-tags" style="margin-bottom: 1rem;">
                                          {speaker.tags.map((tag) => (
                                            <div class="single-tag">
                                              <p>{getCategoryNameFromTag(tag)}</p>
                                            </div>
                                          ))}
                                        </div>
                                      )}
                                      <div class="card-row card-row-info">
                                        <div class="speaker-text-content">
                                          <h3 class="h5">{speaker.name}</h3>
                                          <p>{speaker.roleOrg}</p>
                                          {speaker.role && <p class="speaker-role">{speaker.role}</p>}
                                        </div>
                                        {speaker.bio && (
                                          <div class="speaker-bio-row">
                                            <div class="speaker-bio-container">
                                              <span class="bio-indicator">ⓘ Bio</span>
                                              <div class="speaker-bio-tooltip">
                                                {speaker.bio}
                                              </div>
                                            </div>
                                          </div>
                                        )}
                                      </div>
                                    </a>
                                  </div>
                                ))}
                              </div>
                            )}

                            <!-- Social share component with reduced spacing -->
                              <SocialShare
                                title={`${session.title} - GOSIM AI Paris 2025`}
                                url={getEventUrl(session.title)}
                                description={session.content ? session.content.replace(/<[^>]*>/g, "").substring(0, 160) : ""}
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </li>
              ))}
            </ul>
          ) : (
            <p>No sessions available for this day</p>
          )
        }
      </div>
      <p style="text-align: center;  margin: 1rem 0;">
        {isEnglish ? "Schedule is still being updated, stay tuned" : "日程还在更新，敬请期待"}
      </p>
    </div>
  </div>
</section>

<style>
  .speakers-and-share-container {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }
  
  .speaker-role {
    font-weight: 600;
    color: #666;
    margin: 0.25rem 0;
    font-size: 0.9rem;
  }
  
  .card-row-speakers {
    display: flex;
    align-items: stretch;
    gap: 2rem;
    flex-wrap: wrap;
  }
  
  .card-col {
    display: flex;
    flex-direction: column;
    flex: 0 0 calc((100% - 4rem) / 3);
    max-width: calc((100% - 4rem) / 3);
  }
  
  .single-speakers-card {
    display: flex;
    flex-direction: column;
    /* Remove height: 100% to prevent flex issues */
  }
  
  .card-row-image {
    position: relative;
    width: 100%;
    margin-bottom: 0.5rem;
    flex-shrink: 0; /* Prevent image from shrinking */
  }
  
  .card-image {
    position: relative;
    width: 100%;
    padding-bottom: 100%; /* Use padding trick for 1:1 aspect ratio */
    overflow: hidden;
    border-radius: 8px;
    background: #f0f0f0;
  }
  
  .card-image img,
  .card-image picture {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .card-row-info {
    display: flex;
    flex-direction: column;
    flex: 1;
    justify-content: space-between;
    min-width: 0; /* Allow text to shrink */
  }
  
  .speaker-text-content {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    gap: 0.2rem;
    margin-bottom: 0.5rem;
    min-width: 0; /* Allow text to shrink */
  }
  
  .speaker-text-content h3,
  .speaker-text-content p {
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .speaker-bio-row {
    display: flex;
    align-items: flex-start;
    justify-content: flex-start;
    min-height: 28px;
    /* Remove fixed height to allow bio icon to display properly */
  }
  
  .speaker-bio-container {
    position: relative;
    display: inline-block;
    margin: 0.25rem 0;
    vertical-align: top;
  }
  
  .bio-indicator {
    font-size: 0.8rem;
    color: #007acc;
    cursor: pointer;
    border: 1px solid #007acc;
    border-radius: 12px;
    padding: 2px 8px;
    display: inline-block;
    transition: all 0.2s ease;
  }
  
  .bio-indicator:hover {
    background-color: #007acc;
    color: white;
  }
  
  .speaker-bio-tooltip {
    visibility: hidden;
    opacity: 0;
    position: absolute;
    bottom: 100%;
    left: 0;
    min-width: 280px;
    max-width: 350px;
    background-color: #333;
    color: white;
    padding: 12px 16px;
    border-radius: 8px;
    font-size: 0.85rem;
    line-height: 1.4;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    z-index: 1000;
    transition: opacity 0.3s ease, visibility 0.3s ease;
    margin-bottom: 8px;
  }
  
  .speaker-bio-tooltip::after {
    content: "";
    position: absolute;
    top: 100%;
    left: 20px;
    border: 5px solid transparent;
    border-top-color: #333;
  }
  
  .speaker-bio-container:hover .speaker-bio-tooltip {
    visibility: visible;
    opacity: 1;
  }
  
  /* Responsive adjustments */
  @media (max-width: 992px) {
    .single-speaker-card {
      flex-direction: column;
      gap: 0.75rem;
    }
    
    .card-row-info {
      width: 100%;
    }
    
    .speaker-bio-row {
      margin-top: 0.25rem;
    }
  }
  
  @media (max-width: 768px) {
    .speaker-bio-tooltip {
      min-width: 240px;
      max-width: 280px;
      left: auto;
      right: -10px;
      font-size: 0.8rem;
    }
    
    .speaker-bio-tooltip::after {
      left: auto;
      right: 20px;
    }
    
    .single-speaker-card {
      padding: 1rem;
    }
    
    .speaker-text-content h3 {
      font-size: 1rem;
    }
    
    .speaker-text-content p {
      font-size: 0.85rem;
    }
  }
  
  @media (max-width: 480px) {
    .speaker-bio-tooltip {
      position: fixed;
      left: 10px !important;
      right: 10px !important;
      bottom: auto !important;
      top: 50% !important;
      transform: translateY(-50%);
      min-width: unset;
      max-width: unset;
      width: auto;
      font-size: 0.75rem;
      padding: 10px 12px;
    }
    
    .speaker-bio-tooltip::after {
      display: none;
    }
    
    .bio-indicator {
      font-size: 0.7rem;
      padding: 1px 5px;
      white-space: nowrap;
    }
    
    .single-speaker-card {
      padding: 0.75rem;
      gap: 0.5rem;
    }
    
    .speaker-text-content {
      gap: 0.1rem;
      margin-bottom: 0.25rem;
    }
  }
</style>

<script>
  // Accordion toggle functionality
  document.addEventListener('DOMContentLoaded', () => {
    // Handle accordion toggles
    const accordionToggles = document.querySelectorAll('[data-accordion-toggle]');
    
    accordionToggles.forEach(toggle => {
      toggle.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        const accordionItem = toggle.closest('.single-accordion-item');
        if (!accordionItem) return;
        
        const currentStatus = accordionItem.getAttribute('data-accordion-status');
        const newStatus = currentStatus === 'active' ? 'not-active' : 'active';
        
        // Toggle the status
        accordionItem.setAttribute('data-accordion-status', newStatus);
      });
    });

    // Handle filter toggles
    const filterToggles = document.querySelectorAll('[data-filter-toggle]');
    
    filterToggles.forEach(toggle => {
      toggle.addEventListener('click', (e) => {
        e.preventDefault();
        const action = toggle.getAttribute('data-filter-toggle');
        const filterContainer = document.querySelector('.filter-container');
        
        if (action === 'close' && filterContainer) {
          filterContainer.classList.remove('active');
        }
      });
    });

    // Handle filter category selection
    const filterButtons = document.querySelectorAll('[data-filter-category]');
    const filterGroups = document.querySelectorAll('[data-filter-grid] .list-group');
    
    filterButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        const category = button.getAttribute('data-filter-category');
        
        // Update active states for buttons
        filterButtons.forEach(btn => {
          const btnCategory = btn.getAttribute('data-filter-category');
          if (btnCategory === category) {
            btn.setAttribute('data-filter-status', 'active');
          } else {
            btn.setAttribute('data-filter-status', 'not-active');
          }
        });
        
        // Show/hide filter groups
        filterGroups.forEach(group => {
          const groupCategory = group.getAttribute('data-filter-category');
          if (groupCategory === category || category === 'all') {
            group.setAttribute('data-filter-status', 'active');
          } else {
            group.setAttribute('data-filter-status', 'not-active');
          }
        });
      });
    });
  });
</script>